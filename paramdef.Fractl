/*********************************************************
 * parameter definitions for Fractl
 *
 * Bruno Melli, CSU
 *
 * Dec 2017
 */

//////////////////////////////////////////////////////////

commentdef {
   p_header = "Fractl calculates U, V, and W wind components from 2 or more Doppler radars, and writes a NetCdf file with the results";
}

commentdef {
   p_header = "DEBUGGING";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
   p_desc = "z,y,x,radius. specifies a region for detailed logging";
   p_help = "detail spec used for debugging only.\nExample: \"5,20,30,0.1\"";
} detailSpec;

commentdef {
   p_header = "MINIMUM VALUES";
}

paramdef double {
   p_default = -20;
   p_descr = "Minimum dbz value for valid data";
   p_help = "Any value below that will be tossed out.\nExample: -20";
} minDbz;

paramdef double {
   p_default = 0.3;
   p_descr = "Minimum dbz value for valid data";
   p_help = "Any value below that will be tossed out.\nExample: 0.3";
} minNcp;

commentdef {
   p_header = "TEST MODE";
}

typedef enum {
  MODE_NONE, MODE_ALPHA, MODE_BETA, MODE_ZETA, MODE_ZETA_BELTRAMI, MODE_GAMMA
} testmode_t;

paramdef enum testmode_t {
   p_default = MODE_ZETA;
   p_descr = "Test mode";
   p_help =
   "     MODE_ALPHA:\n"
   "       Use simple synthetic wind data.\n"
   "       Skip the redar files.\n"
   "       Must specify synWinds: W,V,U\n"
   "       Obs are located at the verif cell centers.\n\n"
   "     MODE_BETA:\n"
   "       Use simple synthetic wind data.\n"
   "       Read swp files and use swp obs locations,\n"
   "       but replace radial vel with synthetic.\n"
   "       Must specify synWinds: W,V,U\n"
   "       radFiles beg,lim\n"
   "       Use radar files i: beg <= i < lim.\n"
   "       If beg == lim == 0, read all files\n\n"
   "     MODE_ZETA:\n"
   "       Operational: use specified radar data.\n"
   "       Specify synWinds: 0,0,0\n"
   "       radFiles beg,lim\n"
   "       Use radar files i: beg <= i < lim.\n"
   "       If beg == lim == 0, read all files\n\n"
   "     MODE_ZETA_BELTRAMI:\n"
   "       Like zeta, but compare the results with\n"
   "       the test Beltrami flow and print statistics.\n"
   "       Specify synWinds: 0,0,0\n"
   "       This is only useful for swp files generated\n"
   "       by Michael Bell's Beltrami flow simulation.\n"
   "     MODE_GAMMA:\n"
   "       Like zeta, but compare the results with\n"
   "       the constant flow and print statistics.\n"
   "       Specify synWinds: 0,0,0\n"
   ;
} testMode;

paramdef string {
  p_default = "0,0";
  p_desc = "radar file filter: start,limit";
  p_help = "Use radar files i: start <= i < limit.\nRead all files if start == limit == 0";
} radFiles;

commentdef {
   p_header = "SYN WIND";
}

paramdef string {
   p_default = "0,0,0";
   p_desc = "Wind field for any testMode other than zeta";
   p_help =
     "      Specify a comma sep triplet: W,V,U\n"
     "      If a wind spec is numeric,\n"
     "        use that constant uniform value.\n"
     "      Else the wind spec is the name for\n"
     "        one of SYNFUNC_* values:\n"
     "        \"sinx\": wind component = sin(locx)\n"
     "        \"siny\": wind component = sin(locy)\n"
     "        \"sinz\": wind component = sin(locz)\n"
     "      Example:\n"
     "        -synWinds 3,sinx,sinx\n"
     "        Means uniform Z wind at 3 m/s.\n"
     "        Both V and U winds = sin(locx),\n"
     "          so the wind would be from the SW\n"
     "          to the NW, varying as sin(locx).\n";
} synWinds;

commentdef {
   p_header = "GRID SPEC";
}

paramdef string {
   p_default = 0.5;
   p_desc = "Z grid description";
   p_help = "\"min,max,incr\"\n"
     "   To get min and max from the data, specify only the increment\n";
} zGrid;

paramdef string {
   p_default = 1.0;
   p_desc = "Y grid description";
   p_help = "\"min,max,incr\" or \"incr\"";
} yGrid;

paramdef string {
   p_default = 1.0;
   p_desc = "X grid description";
   p_help = "\"min,max,incr\" or \"incr\"";
} xGrid;

commentdef {
  p_header = "GRID_TYPE";
};

typedef enum {
  GRID_MESH, GRID_MISH
} grid_type_t;

paramdef enum grid_type_t {
  p_default = GRID_MESH;
  p_desc = "What kind of grid to use";
  p_help = "Mesh for stand-alone. Mish for Samurai input";
} gridType;;

commentdef {
   p_header = "PROJECTION";
};

paramdef string {
   p_default = "transverseMercator";
   p_desc = "Projection Name";
   p_help = "Must be transverseMercador";
} projName;

paramdef double {
   p_default = 0.0;
   p_desc = "projection lat0";
   p_help = "For example: 16.5";
} projLat0;

paramdef double {
   p_default = 0.0;
   p_desc = "projection lon0";
   p_help = "For example: 148.0";
} projLon0;

paramdef double {
  p_desc = "radar altitude in km relative to sea level";
  p_help = "only needed for pre gridded mode";
  p_default = -1.0;
} radarAlt;

commentdef {
   p_header = "MISC";
};

paramdef double {
   p_desc = "W wind into the base of the lowest level"
   p_default = 0.0;
} baseW;

paramdef double {
   p_default = 1.0e-6;
   p_desc = "epsilon";
} epsilon;

commentdef {
   p_header = "LIMITS";
};

paramdef double {
   p_desc = "Max absolute delta altitude of observations";
   p_help = "in km. Default 0";
   p_default = 0.0;
} maxDeltaAltKm;

paramdef double {
   p_desc = "Max Absolute Elevation";
   p_help = "in degree";
   p_default = 0.0;
} maxAbsElevDeg;

paramdef double {
   p_desc = "Min radial distance of observation";
   p_help = "in km";
   p_default = 0.0;
} minRadialDistKm;

paramdef int {
   p_default = 100.0;
   p_desc = "Max number of nearest neighbors";
} numNbrMax;

paramdef double {
   p_default = 1.0;
   p_desc = "Max Dist Base";
   p_help = "max point distance = base + factor * aircraftDist";
} maxDistBase;

paramdef double {
   p_default = 0.016666;
   p_desc = "Max Dist Factor";
   p_help = "max point distance = base + factor * aircraftDist";
} maxDistFactor;

commentdef {
   p_header = "FLAGS";
};

paramdef string {
   p_desc = "Force ncp and dbz to be ok on all points";
   p_help = "y/n";
   p_default = "n";
} forceOk;

paramdef string {
   p_desc = "use Eigen";
   p_help = "y: use Eigen, n: use Cramer";
   p_default = "y";
} useEigen;

paramdef string {
   p_desc = "pre-gridded";
   p_help = "Data is pre-gridded";
   p_default = "n";
} preGridded;

commentdef {
   p_header = "FILES AND DIRECTORIES";
};

paramdef string {
   p_desc = "Input file directory";
   p_help = "Any radx supported format, or output of Radx2Grid";
} inDir;

paramdef string {
   p_default = "^cfrad";
   p_desc = "regex for files in inDir";
   p_help = "for example '^swp'";
} fileRegex;

paramdef string {
   p_desc = "File containing a list of input files";
   p_help = "One entry per line\n"
     "fileName altKmMsl latDeg lonDeg\n"
     "# in the first column is a comment";
} fileList;

paramdef string {
   p_desc = "Output text file";
   p_help = "Has verification of grid results.";
} outTxt;

paramdef string {
   p_default = "./";
   p_desc = "Output NetCDF file";
   p_help = "If outNc ends in a slash we make a subdir and write to yyyymmdd/ncf_yyyymmdd_hhmmss.nc";
} outNc;

commentdef {
   p_header = "FIELDS";
};

paramdef string {
   p_desc = "Name of the radial wind field";
   p_help = "VEL for NEXRAD, VG for Eldora, VE for CSU-CHILL";
} radialName;

paramdef string {
   p_desc = "Name of the reflectivity field";
   p_help = "REF for NEXRAD, DBZ for Eldora, DZ for CSU-CHILL";
} dbzName;

paramdef string {
   p_desc = "Name of the normalized coherent power field";
   p_help = "Not available for NEXRAD, NCP for Eldora, NC for CSU-CHILL";
} ncpName;

commentdef {
  p_header = "FILTERS";
};

typedef enum {
  FILTER_NONE, FILTER_LEISE
} filter_t;

paramdef enum filter_t {
  p_default = FILTER_NONE;
  p_desc = "Low pass filter to apply to U and V";
} uvFilter;

paramdef enum filter_t {
  p_default = FILTER_NONE;
  p_desc = "Low pass filter to apply to W";
} wFilter;

paramdef int {
  p_default = 1;
  p_desc = "Number of steps for U and V filtering algorithm";
  p_help = "Applies to all dimensions. Use uvMultiSteps for dimension specific steps";
} uvSteps;

paramdef string {
  p_desc = "Dimension specific steps for U and V filtering";
  p_help = "Comma separated steps.\nExample: \"1,2,1\"";
} uvMultiStep;

paramdef int {
  p_default = 1;
  p_desc = "Number of steps for W filtering algorithm";
  p_help = "Applies to all dimensions. Use wMultiStep for dimension specific steps";
} wSteps;

paramdef string {
  p_desc = "Dimension specific steps for W filtering";
  p_help = "Comma separated steps.\nExample: \"1,2,1\"";
} wMultiStep;

commentdef {
  p_header = "INTERPOLATION";
};

typedef enum {
  INTERP_NONE, INTERP_LEISE, INTERP_RADAR_WIND
} interp_t;

paramdef enum interp_t {
  p_default = INTERP_NONE;
  p_desc = "Missing U and V value interpolation";
  p_help = "Applied before calculating W";
} uvInterp;

