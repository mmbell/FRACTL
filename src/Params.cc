/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program fractl
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Fractl calculates U, V, and W wind components from 2 or more Doppler radars, and writes a NetCdf file with the results");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'detailSpec'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("detailSpec");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("detail spec used for debugging only.\nExample: \"5,20,30,0.1\"");
    tt->val_offset = (char *) &detailSpec - &_start_;
    tt->single_val.s = tdrpStrDup("not_set");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("MINIMUM VALUES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'minDbz'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("minDbz");
    tt->descr = tdrpStrDup("Minimum dBZ value for valid data");
    tt->help = tdrpStrDup("Any value below that will be tossed out.\nExample: -20");
    tt->val_offset = (char *) &minDbz - &_start_;
    tt->single_val.d = -20;
    tt++;
    
    // Parameter 'minNcp'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("minNcp");
    tt->descr = tdrpStrDup("Minimum NCP value for valid data");
    tt->help = tdrpStrDup("Any value below that will be tossed out.\nExample: 0.3");
    tt->val_offset = (char *) &minNcp - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("TEST MODE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'testMode'
    // ctype is '_testmode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("testMode");
    tt->descr = tdrpStrDup("Test mode");
    tt->help = tdrpStrDup("     MODE_ALPHA:\n       Use simple synthetic wind data.\n       Skip the redar files.\n       Must specify synWinds: W,V,U\n       Obs are located at the verif cell centers.\n\n     MODE_BETA:\n       Use simple synthetic wind data.\n       Read swp files and use swp obs locations,\n       but replace radial vel with synthetic.\n       Must specify synWinds: W,V,U\n       radFiles beg,lim\n       Use radar files i: beg <= i < lim.\n       If beg == lim == 0, read all files\n\n     MODE_ZETA:\n       Operational: use specified radar data.\n       Specify synWinds: 0,0,0\n       radFiles beg,lim\n       Use radar files i: beg <= i < lim.\n       If beg == lim == 0, read all files\n\n     MODE_ZETA_BELTRAMI:\n       Like zeta, but compare the results with\n       the test Beltrami flow and print statistics.\n       Specify synWinds: 0,0,0\n       This is only useful for swp files generated\n       by Michael Bell's Beltrami flow simulation.\n     MODE_GAMMA:\n       Like zeta, but compare the results with\n       the constant flow and print statistics.\n       Specify synWinds: 0,0,0\n");
    tt->val_offset = (char *) &testMode - &_start_;
    tt->enum_def.name = tdrpStrDup("testmode_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("MODE_NONE");
      tt->enum_def.fields[0].val = MODE_NONE;
      tt->enum_def.fields[1].name = tdrpStrDup("MODE_ALPHA");
      tt->enum_def.fields[1].val = MODE_ALPHA;
      tt->enum_def.fields[2].name = tdrpStrDup("MODE_BETA");
      tt->enum_def.fields[2].val = MODE_BETA;
      tt->enum_def.fields[3].name = tdrpStrDup("MODE_ZETA");
      tt->enum_def.fields[3].val = MODE_ZETA;
      tt->enum_def.fields[4].name = tdrpStrDup("MODE_ZETA_BELTRAMI");
      tt->enum_def.fields[4].val = MODE_ZETA_BELTRAMI;
      tt->enum_def.fields[5].name = tdrpStrDup("MODE_GAMMA");
      tt->enum_def.fields[5].val = MODE_GAMMA;
    tt->single_val.e = MODE_ZETA;
    tt++;
    
    // Parameter 'radFiles'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("radFiles");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Use radar files i: start <= i < limit.\nRead all files if start == limit == 0");
    tt->val_offset = (char *) &radFiles - &_start_;
    tt->single_val.s = tdrpStrDup("0,0");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("SYN WIND");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'synWinds'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("synWinds");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("      Specify a comma sep triplet: W,V,U\n      If a wind spec is numeric,\n        use that constant uniform value.\n      Else the wind spec is the name for\n        one of SYNFUNC_* values:\n        \"sinx\": wind component = sin(locx)\n        \"siny\": wind component = sin(locy)\n        \"sinz\": wind component = sin(locz)\n      Example:\n        -synWinds 3,sinx,sinx\n        Means uniform Z wind at 3 m/s.\n        Both V and U winds = sin(locx),\n          so the wind would be from the SW\n          to the NW, varying as sin(locx).\n");
    tt->val_offset = (char *) &synWinds - &_start_;
    tt->single_val.s = tdrpStrDup("0,0,0");
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("GRID SPEC");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'zGrid'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("zGrid");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("\"min,max,incr\"\n   To get min and max from the data, specify only the increment\n");
    tt->val_offset = (char *) &zGrid - &_start_;
    tt->single_val.s = tdrpStrDup("0.5");
    tt++;
    
    // Parameter 'yGrid'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("yGrid");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("\"min,max,incr\" or \"incr\"");
    tt->val_offset = (char *) &yGrid - &_start_;
    tt->single_val.s = tdrpStrDup("1.0");
    tt++;
    
    // Parameter 'xGrid'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("xGrid");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("\"min,max,incr\" or \"incr\"");
    tt->val_offset = (char *) &xGrid - &_start_;
    tt->single_val.s = tdrpStrDup("1.0");
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("GRID_TYPE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'gridType'
    // ctype is '_grid_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("gridType");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Mesh for stand-alone. Mish for Samurai input");
    tt->val_offset = (char *) &gridType - &_start_;
    tt->enum_def.name = tdrpStrDup("grid_type_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("GRID_MESH");
      tt->enum_def.fields[0].val = GRID_MESH;
      tt->enum_def.fields[1].name = tdrpStrDup("GRID_MISH");
      tt->enum_def.fields[1].val = GRID_MISH;
    tt->single_val.e = GRID_MESH;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("PROJECTION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'projName'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("projName");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Must be transverseMercador");
    tt->val_offset = (char *) &projName - &_start_;
    tt->single_val.s = tdrpStrDup("transverseMercator");
    tt++;
    
    // Parameter 'projLat0'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("projLat0");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("For example: 16.5");
    tt->val_offset = (char *) &projLat0 - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'projLon0'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("projLon0");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("For example: 148.0");
    tt->val_offset = (char *) &projLon0 - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'radarAlt'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radarAlt");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("only needed for pre gridded mode");
    tt->val_offset = (char *) &radarAlt - &_start_;
    tt->single_val.d = -1;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("MISC");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'baseW'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("baseW");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &baseW - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'epsilon'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("epsilon");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &epsilon - &_start_;
    tt->single_val.d = 1e-06;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("LIMITS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'maxDeltaAltKm'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("maxDeltaAltKm");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("in km. Default 0");
    tt->val_offset = (char *) &maxDeltaAltKm - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'maxAbsElevDeg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("maxAbsElevDeg");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("in degree");
    tt->val_offset = (char *) &maxAbsElevDeg - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'minRadialDistKm'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("minRadialDistKm");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("in km");
    tt->val_offset = (char *) &minRadialDistKm - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'numNbrMax'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("numNbrMax");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &numNbrMax - &_start_;
    tt->single_val.i = 100;
    tt++;
    
    // Parameter 'maxDistBase'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("maxDistBase");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("max point distance = base + factor * aircraftDist");
    tt->val_offset = (char *) &maxDistBase - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'maxDistFactor'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("maxDistFactor");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("max point distance = base + factor * aircraftDist");
    tt->val_offset = (char *) &maxDistFactor - &_start_;
    tt->single_val.d = 0.016666;
    tt++;
    
    // Parameter 'maxU'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("maxU");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Maximum value for U wind component");
    tt->val_offset = (char *) &maxU - &_start_;
    tt->single_val.d = 100;
    tt++;
    
    // Parameter 'maxV'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("maxV");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Maximum value for V wind component");
    tt->val_offset = (char *) &maxV - &_start_;
    tt->single_val.d = 100;
    tt++;
    
    // Parameter 'maxW'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("maxW");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Maximum value for W wind component");
    tt->val_offset = (char *) &maxW - &_start_;
    tt->single_val.d = 50;
    tt++;
    
    // Parameter 'conditionNumberCutoff'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("conditionNumberCutoff");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Maximum value for a cell ConditionNumber");
    tt->val_offset = (char *) &conditionNumberCutoff - &_start_;
    tt->single_val.d = 100;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("FLAGS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'forceOk'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("forceOk");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("y/n");
    tt->val_offset = (char *) &forceOk - &_start_;
    tt->single_val.s = tdrpStrDup("n");
    tt++;
    
    // Parameter 'useEigen'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("useEigen");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("y: use Eigen, n: use Cramer");
    tt->val_offset = (char *) &useEigen - &_start_;
    tt->single_val.s = tdrpStrDup("y");
    tt++;
    
    // Parameter 'preGridded'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("preGridded");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("(NOT WORKING YET) Data is pre-gridded");
    tt->val_offset = (char *) &preGridded - &_start_;
    tt->single_val.s = tdrpStrDup("n");
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("FILES AND DIRECTORIES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'inDir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("inDir");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Any radx supported format, or output of Radx2Grid");
    tt->val_offset = (char *) &inDir - &_start_;
    tt->single_val.s = tdrpStrDup("not_set");
    tt++;
    
    // Parameter 'fileRegex'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("fileRegex");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("for example '^swp'");
    tt->val_offset = (char *) &fileRegex - &_start_;
    tt->single_val.s = tdrpStrDup("^cfrad");
    tt++;
    
    // Parameter 'fileList'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("fileList");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("One entry per line\nfileName altKmMsl latDeg lonDeg\n# in the first column is a comment");
    tt->val_offset = (char *) &fileList - &_start_;
    tt->single_val.s = tdrpStrDup("not_set");
    tt++;
    
    // Parameter 'outTxt'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("outTxt");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Has verification of grid results.");
    tt->val_offset = (char *) &outTxt - &_start_;
    tt->single_val.s = tdrpStrDup("not_set");
    tt++;
    
    // Parameter 'outNc'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("outNc");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("If outNc ends in a slash we make a subdir and write to yyyymmdd/ncf_yyyymmdd_hhmmss.nc");
    tt->val_offset = (char *) &outNc - &_start_;
    tt->single_val.s = tdrpStrDup("./");
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("FIELDS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'radialName'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("radialName");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("VEL for NEXRAD, VG for Eldora, VE for CSU-CHILL");
    tt->val_offset = (char *) &radialName - &_start_;
    tt->single_val.s = tdrpStrDup("not_set");
    tt++;
    
    // Parameter 'dbzName'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dbzName");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("REF for NEXRAD, DBZ for Eldora, DZ for CSU-CHILL");
    tt->val_offset = (char *) &dbzName - &_start_;
    tt->single_val.s = tdrpStrDup("not_set");
    tt++;
    
    // Parameter 'ncpName'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ncpName");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Not available for NEXRAD, NCP for Eldora, NC for CSU-CHILL");
    tt->val_offset = (char *) &ncpName - &_start_;
    tt->single_val.s = tdrpStrDup("not_set");
    tt++;
    
    // Parameter 'Comment 13'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 13");
    tt->comment_hdr = tdrpStrDup("FILTERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'uvFilter'
    // ctype is '_filter_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("uvFilter");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &uvFilter - &_start_;
    tt->enum_def.name = tdrpStrDup("filter_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FILTER_NONE");
      tt->enum_def.fields[0].val = FILTER_NONE;
      tt->enum_def.fields[1].name = tdrpStrDup("FILTER_LEISE");
      tt->enum_def.fields[1].val = FILTER_LEISE;
    tt->single_val.e = FILTER_NONE;
    tt++;
    
    // Parameter 'wFilter'
    // ctype is '_filter_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("wFilter");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wFilter - &_start_;
    tt->enum_def.name = tdrpStrDup("filter_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FILTER_NONE");
      tt->enum_def.fields[0].val = FILTER_NONE;
      tt->enum_def.fields[1].name = tdrpStrDup("FILTER_LEISE");
      tt->enum_def.fields[1].val = FILTER_LEISE;
    tt->single_val.e = FILTER_NONE;
    tt++;
    
    // Parameter 'uvSteps'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("uvSteps");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Applies to all dimensions. Use uvMultiSteps for dimension specific steps");
    tt->val_offset = (char *) &uvSteps - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'uvMultiStep'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("uvMultiStep");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Comma separated steps.\nExample: \"1,2,1\"");
    tt->val_offset = (char *) &uvMultiStep - &_start_;
    tt->single_val.s = tdrpStrDup("not_set");
    tt++;
    
    // Parameter 'wSteps'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("wSteps");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Applies to all dimensions. Use wMultiStep for dimension specific steps");
    tt->val_offset = (char *) &wSteps - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'wMultiStep'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("wMultiStep");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Comma separated steps.\nExample: \"1,2,1\"");
    tt->val_offset = (char *) &wMultiStep - &_start_;
    tt->single_val.s = tdrpStrDup("not_set");
    tt++;
    
    // Parameter 'Comment 14'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 14");
    tt->comment_hdr = tdrpStrDup("INTERPOLATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'uvInterp'
    // ctype is '_interp_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("uvInterp");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Applied before calculating W");
    tt->val_offset = (char *) &uvInterp - &_start_;
    tt->enum_def.name = tdrpStrDup("interp_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("INTERP_NONE");
      tt->enum_def.fields[0].val = INTERP_NONE;
      tt->enum_def.fields[1].name = tdrpStrDup("INTERP_LEISE");
      tt->enum_def.fields[1].val = INTERP_LEISE;
      tt->enum_def.fields[2].name = tdrpStrDup("INTERP_RADAR_WIND");
      tt->enum_def.fields[2].val = INTERP_RADAR_WIND;
    tt->single_val.e = INTERP_NONE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
